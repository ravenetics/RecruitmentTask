/*
 * This Scala source file was generated by the Gradle 'init' task.
 */
package ravenetics.test

/**
 * Chcemy znaleźć "pętle" w dowolnej sekwencji.
 * Przykładową sekwencją może być ciąg znaków.
 * A pętla to powtórzenie tego samego podzbioru elementów po sobie.
 * Przykładowo:
 *
 * ABCDEF -> nie zawiera pętli
 * ABAB -> zawiera pętle o długości 2 bo powtarza się element AB
 * AA -> zawiera pętle o długości 1 bo powtarza się element A
 * AABAA -> nie zawiera żadnej pętli o minimalnej długości 2
 *
 * Algorytm powinien działać dla elementów tego samego typu.
 *
 */
object CycleDetector {

  case class CycleDefinition[T](
                                 cycle: Seq[T],
                                 cycleCount: Int,
                               )

  def findCycles[T](
                     seq: Seq[T],
                     minCycleLength: Int = 2,
                   ): Option[CycleDefinition[T]] = {
    var x = minCycleLength - 1
    var y = x * 2 + 1
    while (y < seq.length) {
      if (seq(x) == seq(y))
        if (seq.slice(0, x + 1) == seq.slice(x + 1, y + 1))
          return Some(createDefinition(seq, seq.slice(0, x + 1)))
      x = x + 1
      y = y + 2
    }
    None
  }

  private def createDefinition[T](
                                   seq: Seq[T],
                                   cycle: Seq[T],
                                 ): CycleDefinition[T] = {
    val count =
      seq.grouped(cycle.length).drop(2).takeWhile(it => it == cycle).length
    CycleDefinition(cycle, count + 2)
  }

}
