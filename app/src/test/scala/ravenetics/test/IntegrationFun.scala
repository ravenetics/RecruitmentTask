/*
 * This Scala Testsuite was generated by the Gradle 'init' task.
 */
package ravenetics.test

import akka.actor.ActorSystem
import akka.http.scaladsl.Http
import akka.testkit.TestKit
import org.junit.runner.RunWith
import org.scalatest.BeforeAndAfterAll
import org.scalatest.concurrent.ScalaFutures
import org.scalatest.funsuite.AnyFunSuiteLike
import org.scalatest.matchers.must.Matchers
import org.scalatest.matchers.should.Matchers.convertToAnyShouldWrapper
import org.scalatestplus.junit.JUnitRunner

import scala.concurrent.ExecutionContext
import scala.concurrent.duration._
import scala.language.postfixOps

@RunWith(classOf[JUnitRunner])
class IntegrationFun extends TestKit(ActorSystem("MySpec"))
  with AnyFunSuiteLike
  with Matchers
  with BeforeAndAfterAll with ScalaFutures {

  override implicit val patienceConfig: PatienceConfig = PatienceConfig(10 seconds, 100 millis)
  implicit val ec: ExecutionContext = system.dispatcher

  override def afterAll(): Unit = {
    TestKit.shutdownActorSystem(system)
  }

  private val client = new HelloClient(7777, Http())

  test("#1 We are able to communicate with http-server") {
    whenReady(client.hello()) { rsp =>
      rsp shouldBe "hello world!";
    }
  }

  test("#2 We are able to call small but handy bash scripts") {
    client.isLifeAwesome shouldBe "bash\nis\ncomplicated"
  }

}
